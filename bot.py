import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hcode

from config import BOT_TOKEN, ADMIN_IDS
from database import Database
from wallet_service import WalletService
from staking_service import StakingService
from keyboards import *

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Initialize services
db = Database()
wallet_service = WalletService(db)
staking_service = StakingService(db, wallet_service)

# FSM States
class WalletGenerationStates(StatesGroup):
    waiting_for_count = State()

class WithdrawalStates(StatesGroup):
    waiting_for_wallet = State()
    waiting_for_amount = State()
    waiting_for_address = State()

class SwapStates(StatesGroup):
    waiting_for_wallet = State()
    waiting_for_amount = State()

class StakingStates(StatesGroup):
    waiting_for_wallet = State()
    waiting_for_amount = State()

# User states storage
user_states = {}

def escape_markdown(text: str) -> str:
    """Escape text for Markdown V2"""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Start command handler"""
    telegram_id = message.from_user.id
    user = message.from_user
    
    # Check if user exists
    existing_user = db.get_user(telegram_id)
    if not existing_user:
        # Create new user
        new_user = db.create_user(telegram_id)
        if not new_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        welcome_text = f"""
üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–∞–º—É—Ä–∞–π\\! üå∏

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç: {hcode(new_user['account_id'])}
–°–æ–∑–¥–∞–Ω: {new_user['creation_date'][:19]}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ\\! üó°Ô∏è
        """
    else:
        welcome_text = f"""
üå∏ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Å–∞–º—É—Ä–∞–π\\! üå∏

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç: {hcode(existing_user['account_id'])}
–°–æ–∑–¥–∞–Ω: {existing_user['creation_date'][:19]}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ\\! üó°Ô∏è
        """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="MarkdownV2")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """Help command handler"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üéå –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è 8 –±–ª–æ–∫—á–µ–π–Ω\\-—Å–µ—Ç–µ–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ETH, TRX, SOL, BNB, DOGE, AVAX, POL, XRP
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π

üí∞ –ë–∞–ª–∞–Ω—Å:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ USDT

üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å:
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤

üì§ –í—ã–≤–µ—Å—Ç–∏:
‚Ä¢ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∫–æ—à–µ–ª—å–∫–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ETH –∏ TRX –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π

üîÑ –°–≤–∞–ø–Ω—É—Ç—å:
‚Ä¢ –û–±–º–µ–Ω –º–µ–∂–¥—É –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ USDT
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ETH/ERC20 –∏ TRX/TRC20

üíπ –°—Ç–µ–π–∫–∏–Ω–≥:
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: 1, 3, 6, 9 –º–µ—Å—è—Ü–µ–≤
‚Ä¢ –°—Ç–∞–≤–∫–∏: 16\\%, 18\\%, 20\\%, 22\\% –≥–æ–¥–æ–≤—ã—Ö
‚Ä¢ –î–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å —à—Ç—Ä–∞—Ñ–æ–º 50\\%

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î
‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–æ—à–µ–ª—å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è

–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support
    """
    
    await message.answer(help_text, reply_markup=get_back_keyboard("back_to_main"), parse_mode="MarkdownV2")

@dp.message(F.text == "üéå –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—ë–∫")
async def start_wallet_generation(message: types.Message):
    """Start wallet generation process"""
    await message.answer(
        "üéå –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=get_network_keyboard()
    )

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    """Show user balance"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    wallets = db.get_user_wallets(user['user_id'])
    
    if not wallets:
        await message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤\\. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏—Ö\\!",
            reply_markup=get_back_keyboard("back_to_main"),
            parse_mode="MarkdownV2"
        )
        return
    
    # Get balances
    balances = await wallet_service.get_all_balances(user['user_id'])
    
    if not balances:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤")
        return
    
    balance_text = "üí∞ –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:\n\n"
    
    for network, network_wallets in balances.items():
        network_name = config.SUPPORTED_NETWORKS[network]['name']
        balance_text += f"üåê {network_name}:\n"
        
        for address, balance_data in network_wallets.items():
            balance_text += f"üìç {hcode(address[:10] + '...')}\n"
            
            # Native token balance
            native_balance = balance_data['native']
            if native_balance > 0:
                symbol = balance_data['symbol']
                balance_text += f"  ‚Ä¢ {symbol}: {native_balance:.6f}\n"
            
            # USDT balance
            if 'USDT' in balance_data and balance_data['USDT'] > 0:
                balance_text += f"  ‚Ä¢ USDT: {balance_data['USDT']:.6f}\n"
            
            balance_text += "\n"
    
    await message.answer(
        balance_text,
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )

@dp.message(F.text == "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def show_deposit_addresses(message: types.Message):
    """Show deposit addresses"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    wallets = db.get_user_wallets(user['user_id'])
    
    if not wallets:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\\. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏—Ö\\!",
            reply_markup=get_back_keyboard("back_to_main"),
            parse_mode="MarkdownV2"
        )
        return
    
    deposit_text = "üì• –ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
    
    for wallet in wallets:
        network_name = config.SUPPORTED_NETWORKS[wallet['network']]['name']
        deposit_text += f"üåê {network_name}:\n"
        deposit_text += f"üìç {hcode(wallet['address'])}\n\n"
    
    await message.answer(
        deposit_text,
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )

@dp.message(F.text == "üì§ –í—ã–≤–µ—Å—Ç–∏")
async def start_withdrawal(message: types.Message):
    """Start withdrawal process"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    wallets = db.get_user_wallets(user['user_id'])
    
    if not wallets:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞\\. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏—Ö\\!",
            reply_markup=get_back_keyboard("back_to_main"),
            parse_mode="MarkdownV2"
        )
        return
    
    withdrawal_text = "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n"
    
    for wallet in wallets:
        network_name = config.SUPPORTED_NETWORKS[wallet['network']]['name']
        withdrawal_text += f"üåê {network_name}:\n"
        withdrawal_text += f"üìç {hcode(wallet['address'])}\n\n"
    
    await message.answer(
        withdrawal_text + "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )
    
    # Set state
    user_states[telegram_id] = {'action': 'withdrawal'}
    await WithdrawalStates.waiting_for_wallet.set()

@dp.message(F.text == "üîÑ –°–≤–∞–ø–Ω—É—Ç—å")
async def start_swap(message: types.Message):
    """Start swap process"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    wallets = db.get_user_wallets(user['user_id'])
    
    # Filter wallets that support swaps (ETH and TRX)
    swap_wallets = [w for w in wallets if w['network'] in ['ETH', 'TRX']]
    
    if not swap_wallets:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —Å–≤–∞–ø–∞\\. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ ETH –∏–ª–∏ TRX\\!",
            reply_markup=get_back_keyboard("back_to_main"),
            parse_mode="MarkdownV2"
        )
        return
    
    swap_text = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–≤–∞–ø–∞:\n\n"
    
    for wallet in swap_wallets:
        network_name = config.SUPPORTED_NETWORKS[wallet['network']]['name']
        swap_text += f"üåê {network_name}:\n"
        swap_text += f"üìç {hcode(wallet['address'])}\n\n"
    
    await message.answer(
        swap_text + "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )
    
    # Set state
    user_states[telegram_id] = {'action': 'swap'}
    await SwapStates.waiting_for_wallet.set()

@dp.message(F.text == "üíπ –°—Ç–µ–π–∫–∏–Ω–≥")
async def show_staking_menu(message: types.Message):
    """Show staking menu"""
    await message.answer(
        "üíπ –°—Ç–µ–π–∫–∏–Ω–≥:",
        reply_markup=get_staking_actions_keyboard()
    )

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def show_info(message: types.Message):
    """Show bot information"""
    info_text = """
üå∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç–æ\\-—Å–∞–º—É—Ä–∞–µ–≤\\! üó°Ô∏è

‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏: üéå –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—ë–∫
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å—ã: üí∞ –ë–∞–ª–∞–Ω—Å
‚Ä¢ –ü–æ–ø–æ–ª–Ω—è—Ç—å: üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å
‚Ä¢ –í—ã–≤–æ–¥–∏—Ç—å: üì§ –í—ã–≤–µ—Å—Ç–∏
‚Ä¢ –°–≤–∞–ø: üîÑ –°–≤–∞–ø–Ω—É—Ç—å
‚Ä¢ –°—Ç–µ–π–∫–∏–Ω–≥: üíπ –°—Ç–µ–π–∫–∏–Ω–≥

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\\. –£–¥–∞—á–∏\\! üå∏
    """
    
    await message.answer(
        info_text,
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )

# Callback handlers
@dp.callback_query(F.data.startswith("generate_"))
async def handle_network_selection(callback: types.CallbackQuery):
    """Handle network selection for wallet generation"""
    network = callback.data.split("_")[1]
    
    await callback.message.edit_text(
        f"üéå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è {network}:",
        reply_markup=get_wallet_count_keyboard(network)
    )

@dp.callback_query(F.data.startswith("count_"))
async def handle_wallet_count(callback: types.CallbackQuery):
    """Handle wallet count selection"""
    _, network, count = callback.data.split("_")
    count = int(count)
    
    await generate_wallets(callback, network, count)

@dp.callback_query(F.data.startswith("manual_count_"))
async def handle_manual_count(callback: types.CallbackQuery, state: FSMContext):
    """Handle manual count input"""
    network = callback.data.split("_")[2]
    
    await state.update_data(network=network)
    await state.set_state(WalletGenerationStates.waiting_for_count)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è {network} \\(1\\-99\\):",
        reply_markup=get_back_keyboard("back_to_networks"),
        parse_mode="MarkdownV2"
    )

@dp.message(WalletGenerationStates.waiting_for_count)
async def handle_count_input(message: types.Message, state: FSMContext):
    """Handle count input"""
    try:
        count = int(message.text)
        if count < 1 or count > 99:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99\\.")
            return
        
        data = await state.get_data()
        network = data["network"]
        
        await state.clear()
        await generate_wallets(message, network, count)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\\.")

async def generate_wallets(message_or_callback, network: str, count: int):
    """Generate wallets"""
    try:
        telegram_id = message_or_callback.from_user.id
        user = db.get_user(telegram_id)
        
        if not user:
            await message_or_callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Generate wallets
        wallets = wallet_service.generate_wallet(network, count)
        
        # Save to database
        for wallet in wallets:
            db.create_wallet(
                user['user_id'], wallet['network'], wallet['address'],
                wallet['private_key'], wallet['seed_phrase']
            )
        
        # Format response
        network_name = config.SUPPORTED_NETWORKS[network]['name']
        response_text = f"üó°Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—à–µ–ª—å–∫–∏ {network_name}:\n\n"
        
        for i, wallet in enumerate(wallets, 1):
            response_text += f"{i}\\. {hcode(wallet['address'])}\n"
        
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(
                response_text,
                reply_markup=get_back_keyboard("back_to_main"),
                parse_mode="MarkdownV2"
            )
        else:
            await message_or_callback.message.edit_text(
                response_text,
                reply_markup=get_back_keyboard("back_to_main"),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        logger.error(f"Error generating wallets: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\."
        
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_text, parse_mode="MarkdownV2")
        else:
            await message_or_callback.message.edit_text(error_text, parse_mode="MarkdownV2")

# Withdrawal handlers
@dp.message(WithdrawalStates.waiting_for_wallet)
async def handle_withdrawal_wallet(message: types.Message, state: FSMContext):
    """Handle withdrawal wallet selection"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    wallet_address = message.text.strip()
    wallet = db.get_wallet_by_address(user['user_id'], wallet_address)
    
    if not wallet:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ\\.")
        return
    
    await state.update_data(wallet_address=wallet_address, network=wallet['network'])
    
    # Show asset selection
    await message.answer(
        f"üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=get_asset_keyboard(wallet['network'], "withdraw")
    )
    
    await state.clear()

@dp.callback_query(F.data.startswith("withdraw_"))
async def handle_withdrawal_asset(callback: types.CallbackQuery, state: FSMContext):
    """Handle withdrawal asset selection"""
    _, network, asset = callback.data.split("_")
    
    await state.update_data(network=network, asset=asset)
    await state.set_state(WithdrawalStates.waiting_for_amount)
    
    network_name = config.SUPPORTED_NETWORKS[network]['name']
    min_fee = config.SUPPORTED_NETWORKS[network]['min_fee']
    
    await callback.message.edit_text(
        f"üì§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {asset} –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n"
        f"–°–µ—Ç—å: {network_name}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {min_fee} {asset}",
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )

@dp.message(WithdrawalStates.waiting_for_amount)
async def handle_withdrawal_amount(message: types.Message, state: FSMContext):
    """Handle withdrawal amount input"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É\\.")
            return
        
        data = await state.get_data()
        network = data["network"]
        asset = data["asset"]
        wallet_address = data["wallet_address"]
        
        # Check balance
        current_balance = await wallet_service.get_balance(wallet_address, network, asset)
        if amount > current_balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {asset}\\. –ë–∞–ª–∞–Ω—Å: {current_balance:.6f}")
            await state.clear()
            return
        
        await state.update_data(amount=amount)
        await state.set_state(WithdrawalStates.waiting_for_address)
        
        await message.answer(
            f"üì§ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
            reply_markup=get_back_keyboard("back_to_main")
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\\.")

@dp.message(WithdrawalStates.waiting_for_address)
async def handle_withdrawal_address(message: types.Message, state: FSMContext):
    """Handle withdrawal address input"""
    data = await state.get_data()
    network = data["network"]
    asset = data["asset"]
    amount = data["amount"]
    wallet_address = data["wallet_address"]
    
    recipient_address = message.text.strip()
    
    # Validate address
    if not wallet_service.validate_address(recipient_address, network):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞\\.")
        await state.clear()
        return
    
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    # Create withdrawal log
    token_type = f"{asset} Withdrawal"
    success = db.create_withdrawal_log(
        user['user_id'], wallet_address, recipient_address,
        amount, token_type, network
    )
    
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥\\.")
        await state.clear()
        return
    
    # Handle different networks
    if network in ['ETH', 'TRX']:
        # Automatic withdrawal for ETH and TRX
        await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\\.\\.\\.")
        # Here you would implement actual withdrawal logic
        await message.answer(
            f"‚úÖ –í—ã–≤–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω\\! –¢–æ–∫–µ–Ω: {asset}\\. –°—É–º–º–∞: {amount}\\. TxID: pending\\.",
            parse_mode="MarkdownV2"
        )
    else:
        # Manual processing for other networks
        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\\! –¢–æ–∫–µ–Ω: {asset}\\. –°—É–º–º–∞: {amount}\\.",
            parse_mode="MarkdownV2"
        )
    
    await state.clear()

# Swap handlers
@dp.message(SwapStates.waiting_for_wallet)
async def handle_swap_wallet(message: types.Message, state: FSMContext):
    """Handle swap wallet selection"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    wallet_address = message.text.strip()
    wallet = db.get_wallet_by_address(user['user_id'], wallet_address)
    
    if not wallet or wallet['network'] not in ['ETH', 'TRX']:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–∞–ø—ã\\.")
        return
    
    await state.update_data(wallet_address=wallet_address, network=wallet['network'])
    
    # Show swap options
    await message.answer(
        f"üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–ø–∞:",
        reply_markup=get_swap_keyboard(wallet['network'])
    )
    
    await state.clear()

@dp.callback_query(F.data.startswith("swap_"))
async def handle_swap_direction(callback: types.CallbackQuery, state: FSMContext):
    """Handle swap direction selection"""
    _, network, from_asset, to_asset = callback.data.split("_")
    
    await state.update_data(network=network, from_asset=from_asset, to_asset=to_asset)
    await state.set_state(SwapStates.waiting_for_amount)
    
    await callback.message.edit_text(
        f"üîÑ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {from_asset} –¥–ª—è —Å–≤–∞–ø–∞ –Ω–∞ {to_asset}:",
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="MarkdownV2"
    )

@dp.message(SwapStates.waiting_for_amount)
async def handle_swap_amount(message: types.Message, state: FSMContext):
    """Handle swap amount input"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É\\.")
            return
        
        data = await state.get_data()
        network = data["network"]
        from_asset = data["from_asset"]
        to_asset = data["to_asset"]
        wallet_address = data["wallet_address"]
        
        # Check balance
        current_balance = await wallet_service.get_balance(wallet_address, network, from_asset)
        if amount > current_balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {from_asset}\\. –ë–∞–ª–∞–Ω—Å: {current_balance:.6f}")
            await state.clear()
            return
        
        # Confirm swap
        confirm_text = f"""
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–≤–∞–ø–∞:
–ö–æ—à–µ–ª–µ–∫: {hcode(wallet_address[:10] + '...')}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {from_asset} ‚Üí {to_asset}
–°—É–º–º–∞: {amount}
–ë–∞–ª–∞–Ω—Å: {current_balance:.6f}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\\?
        """
        
        await message.answer(
            confirm_text,
            reply_markup=get_confirm_keyboard("swap", f"{network}_{from_asset}_{to_asset}_{amount}"),
            parse_mode="MarkdownV2"
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\\.")

# Staking handlers
@dp.callback_query(F.data == "my_stakes")
async def show_my_stakes(callback: types.CallbackQuery):
    """Show user stakes"""
    telegram_id = callback.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    stakes_info = await staking_service.get_user_stakes_info(user['user_id'])
    
    if not stakes_info:
        await callback.message.edit_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–µ–π–∫–æ–≤\\.",
            reply_markup=get_back_keyboard("back_to_staking"),
            parse_mode="MarkdownV2"
        )
        return
    
    stakes_text = "üìä –ú–æ–∏ —Å—Ç–µ–π–∫–∏:\n\n"
    
    for stake in stakes_info:
        network_name = config.SUPPORTED_NETWORKS[stake['wallet_address'][:3]]['name']
        stakes_text += f"üåê {network_name}:\n"
        stakes_text += f"üìç {hcode(stake['wallet_address'][:10] + '...')}\n"
        stakes_text += f"üí∞ {stake['amount']} {stake['asset']}\n"
        stakes_text += f"üìà –°—Ç–∞–≤–∫–∞: {stake['rate']}%\n"
        stakes_text += f"üìÖ –°—Ç–∞—Ç—É—Å: {stake['status']}\n"
        stakes_text += f"üéØ –¢–µ–∫—É—â–µ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {stake['current_reward']:.6f} {stake['asset']}\n"
        
        if stake['status'] == 'active':
            stakes_text += f"‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –≤—ã–≤–æ–¥–µ: {stake['penalty_amount']:.6f} {stake['asset']}\n"
        
        stakes_text += "\n"
    
    await callback.message.edit_text(
        stakes_text,
        reply_markup=get_back_keyboard("back_to_staking"),
        parse_mode="MarkdownV2"
    )

@dp.callback_query(F.data == "create_stake")
async def start_create_stake(callback: types.CallbackQuery):
    """Start create stake process"""
    await callback.message.edit_text(
        "üíπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–µ–π–∫–∏–Ω–≥–∞:",
        reply_markup=get_staking_period_keyboard()
    )

@dp.callback_query(F.data.startswith("stake_period_"))
async def handle_stake_period(callback: types.CallbackQuery, state: FSMContext):
    """Handle staking period selection"""
    period_key = callback.data.split("_")[2]
    
    await state.update_data(period_key=period_key)
    await state.set_state(StakingStates.waiting_for_wallet)
    
    period_data = config.STAKING_PERIODS[period_key]
    await callback.message.edit_text(
        f"üíπ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞:\n\n"
        f"–ü–µ—Ä–∏–æ–¥: {period_data['months']} –º–µ—Å—è—Ü–µ–≤\n"
        f"–°—Ç–∞–≤–∫–∞: {period_data['rate']}% –≥–æ–¥–æ–≤—ã—Ö",
        reply_markup=get_back_keyboard("back_to_staking"),
        parse_mode="MarkdownV2"
    )

@dp.message(StakingStates.waiting_for_wallet)
async def handle_stake_wallet(message: types.Message, state: FSMContext):
    """Handle staking wallet selection"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    wallet_address = message.text.strip()
    wallet = db.get_wallet_by_address(user['user_id'], wallet_address)
    
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω\\.")
        return
    
    await state.update_data(wallet_address=wallet_address, network=wallet['network'])
    
    # Show asset selection
    await message.answer(
        f"üíπ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞:",
        reply_markup=get_asset_keyboard(wallet['network'], "stake")
    )
    
    await state.clear()

@dp.callback_query(F.data.startswith("stake_"))
async def handle_stake_asset(callback: types.CallbackQuery, state: FSMContext):
    """Handle staking asset selection"""
    _, network, asset = callback.data.split("_")
    
    await state.update_data(network=network, asset=asset)
    await state.set_state(StakingStates.waiting_for_amount)
    
    min_amount = config.STAKING_LIMITS['min_usdt'] if asset == 'USDT' else config.STAKING_LIMITS['min_amount']
    
    await callback.message.edit_text(
        f"üíπ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {asset} –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞:\n\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {min_amount} {asset}",
        reply_markup=get_back_keyboard("back_to_staking"),
        parse_mode="MarkdownV2"
    )

@dp.message(StakingStates.waiting_for_amount)
async def handle_stake_amount(message: types.Message, state: FSMContext):
    """Handle staking amount input"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É\\.")
            return
        
        data = await state.get_data()
        period_key = data["period_key"]
        wallet_address = data["wallet_address"]
        asset = data["asset"]
        
        telegram_id = message.from_user.id
        user = db.get_user(telegram_id)
        
        # Create stake
        success, message_text, stake_data = await staking_service.create_stake(
            user['user_id'], wallet_address, amount, asset, period_key
        )
        
        if success:
            period_data = config.STAKING_PERIODS[period_key]
            confirm_text = f"""
‚úÖ –°—Ç–µ–π–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\\!

üí∞ –°—É–º–º–∞: {amount} {asset}
üìÖ –ü–µ—Ä–∏–æ–¥: {period_data['months']} –º–µ—Å—è—Ü–µ–≤
üìà –°—Ç–∞–≤–∫–∞: {period_data['rate']}% –≥–æ–¥–æ–≤—ã—Ö
üéØ –û–∂–∏–¥–∞–µ–º–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {stake_data['expected_reward']:.6f} {asset}
üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {stake_data['end_date'][:19]}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞\\! üå∏
            """
        else:
            confirm_text = f"‚ùå {message_text}"
        
        await message.answer(
            confirm_text,
            reply_markup=get_back_keyboard("back_to_main"),
            parse_mode="MarkdownV2"
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\\.")

# Confirmation handlers
@dp.callback_query(F.data.startswith("confirm_"))
async def handle_confirmation(callback: types.CallbackQuery):
    """Handle confirmations"""
    action_data = callback.data.split("_", 2)[2]
    
    if action_data.startswith("swap_"):
        await handle_swap_confirmation(callback, action_data)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

async def handle_swap_confirmation(callback: types.CallbackQuery, action_data: str):
    """Handle swap confirmation"""
    _, network, from_asset, to_asset, amount = action_data.split("_")
    amount = float(amount)
    
    telegram_id = callback.from_user.id
    user = db.get_user(telegram_id)
    
    # Create swap log
    token_type = f"SWAP: {from_asset} to {to_asset}"
    success = db.create_withdrawal_log(
        user['user_id'], "swap", "swap",
        amount, token_type, network, "pending"
    )
    
    if success:
        await callback.message.edit_text(
            "‚è≥ –ñ–¥–∏—Ç–µ, –≤–∞—à –æ–±–º–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\\.",
            parse_mode="MarkdownV2"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–∞–ø–∞\\.",
            parse_mode="MarkdownV2"
        )

# Back navigation handlers
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """Back to main menu"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "back_to_networks")
async def back_to_networks(callback: types.CallbackQuery):
    """Back to network selection"""
    await callback.message.edit_text(
        "üéå –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=get_network_keyboard()
    )

@dp.callback_query(F.data == "back_to_staking")
async def back_to_staking(callback: types.CallbackQuery):
    """Back to staking menu"""
    await callback.message.edit_text(
        "üíπ –°—Ç–µ–π–∫–∏–Ω–≥:",
        reply_markup=get_staking_actions_keyboard()
    )

# Cancel handlers
@dp.callback_query(F.data == "cancel_action")
async def cancel_action(callback: types.CallbackQuery):
    """Cancel action"""
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_back_keyboard("back_to_main")
    )

# Error handler
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """Handle errors"""
    logger.error(f"Exception while handling {update}: {exception}")
    try:
        if update.message:
            await update.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.", parse_mode="MarkdownV2")
        elif update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except:
        pass

async def main():
    """Main function"""
    logger.info("Starting Crypto Wallet Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())