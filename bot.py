import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import FSInputFile

from config import BOT_TOKEN, ADMIN_IDS
from database import Database
from exchange_service import ExchangeService
from keyboards import *

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Initialize services
db = Database()
exchange_service = ExchangeService(db)

# FSM States
class ExchangeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_confirmation = State()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()
    waiting_for_currency = State()

# User states storage
user_states = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Start command handler"""
    user_id = message.from_user.id
    user = message.from_user
    
    # Create user if not exists
    if not db.get_user(user_id):
        db.create_user(user_id, user.username, user.first_name, user.last_name)
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Exchange Bot!

üíé –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, RUB, BTC, ETH
üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${config.MIN_TRADE_AMOUNT}
üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${config.MAX_TRADE_AMOUNT}
üîπ –ö–æ–º–∏—Å—Å–∏—è: {config.EXCHANGE_FEE * 100}%

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """Help command handler"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç:
1. –ù–∞–∂–º–∏—Ç–µ "üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç"
2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
4. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é

üí∞ –ë–∞–ª–∞–Ω—Å:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
- –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:
- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
- –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã
- –ö–æ–º–∏—Å—Å–∏—è: 2%
- –õ–∏–º–∏—Ç—ã –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏

–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support
    """
    
    await message.answer(help_text, reply_markup=get_back_keyboard("back_to_main"))

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    """Show user balance"""
    user_id = message.from_user.id
    balance = exchange_service.get_user_balance(user_id)
    
    if not balance:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        return
    
    balance_text = "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n"
    for currency, amount in balance.items():
        if amount > 0:
            balance_text += f"{currency}: {amount:.4f}\n"
    
    if all(amount == 0 for amount in balance.values()):
        balance_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
        balance_text += "–ù–∞—á–Ω–∏—Ç–µ —Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç! üí±"
    
    await message.answer(balance_text, reply_markup=get_back_keyboard("back_to_main"))

@dp.message(F.text == "üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç")
async def start_exchange(message: types.Message):
    """Start exchange process"""
    await message.answer(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
        reply_markup=get_currency_keyboard()
    )

@dp.message(F.text == "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
async def show_rates(message: types.Message):
    """Show current exchange rates"""
    rates_text = "üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
    
    base_currencies = ['USD', 'EUR']
    target_currencies = ['USD', 'EUR', 'RUB', 'BTC', 'ETH']
    
    for base in base_currencies:
        rates_text += f"üí± {base}:\n"
        for target in target_currencies:
            if base != target:
                rate = exchange_service.get_exchange_rate(base, target)
                rates_text += f"  {target}: {rate:.6f}\n"
        rates_text += "\n"
    
    await message.answer(rates_text, reply_markup=get_back_keyboard("back_to_main"))

@dp.message(F.text == "üìà –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")
async def show_history(message: types.Message):
    """Show transaction history"""
    user_id = message.from_user.id
    transactions = db.get_user_transactions(user_id, 5)
    
    if not transactions:
        await message.answer("üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.", reply_markup=get_back_keyboard("back_to_main"))
        return
    
    history_text = "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
    for tx in transactions:
        date = tx['created_at'][:19]  # Format datetime
        history_text += f"üïê {date}\n"
        history_text += f"üí± {tx['amount']:.4f} {tx['from_currency']} ‚Üí {tx['total_amount']:.4f} {tx['to_currency']}\n"
        history_text += f"üìä –ö—É—Ä—Å: {tx['rate']:.6f}\n"
        history_text += f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {tx['fee']:.4f} {tx['from_currency']}\n"
        history_text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {tx['status']}\n\n"
    
    await message.answer(history_text, reply_markup=get_back_keyboard("back_to_main"))

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    """Show settings menu"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_admin_keyboard())
    else:
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """Show help information"""
    await cmd_help(message)

# Callback handlers
@dp.callback_query(F.data.startswith("currency_"))
async def handle_currency_selection(callback: types.CallbackQuery):
    """Handle currency selection"""
    currency = callback.data.split("_")[1]
    user_states[callback.from_user.id] = {"from_currency": currency}
    
    await callback.message.edit_text(
        f"üí± –í—ã –≤—ã–±—Ä–∞–ª–∏ {currency}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=get_exchange_keyboard(currency)
    )

@dp.callback_query(F.data.startswith("exchange_"))
async def handle_exchange_selection(callback: types.CallbackQuery):
    """Handle exchange currency pair selection"""
    _, from_currency, to_currency = callback.data.split("_")
    user_states[callback.from_user.id]["to_currency"] = to_currency
    
    rate = exchange_service.get_exchange_rate(from_currency, to_currency)
    rate_text = f"üìä –ö—É—Ä—Å: 1 {from_currency} = {rate:.6f} {to_currency}\n\n"
    
    await callback.message.edit_text(
        f"üí± –û–±–º–µ–Ω {from_currency} ‚Üí {to_currency}\n{rate_text}–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_amount_keyboard(from_currency, to_currency)
    )

@dp.callback_query(F.data.startswith("amount_"))
async def handle_amount_selection(callback: types.CallbackQuery):
    """Handle amount selection"""
    _, from_currency, to_currency, amount = callback.data.split("_")
    amount = float(amount)
    
    await show_exchange_preview(callback, from_currency, to_currency, amount)

@dp.callback_query(F.data.startswith("manual_amount_"))
async def handle_manual_amount(callback: types.CallbackQuery, state: FSMContext):
    """Handle manual amount input"""
    _, from_currency, to_currency = callback.data.split("_")
    
    await state.update_data(from_currency=from_currency, to_currency=to_currency)
    await state.set_state(ExchangeStates.waiting_for_amount)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {from_currency} –¥–ª—è –æ–±–º–µ–Ω–∞:\n\n"
        f"–ú–∏–Ω–∏–º—É–º: {config.MIN_TRADE_AMOUNT}\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {config.MAX_TRADE_AMOUNT}",
        reply_markup=get_back_keyboard(f"back_to_amount_{from_currency}_{to_currency}")
    )

@dp.message(ExchangeStates.waiting_for_amount)
async def handle_amount_input(message: types.Message, state: FSMContext):
    """Handle amount input"""
    try:
        amount = float(message.text)
        data = await state.get_data()
        from_currency = data["from_currency"]
        to_currency = data["to_currency"]
        
        await state.clear()
        await show_exchange_preview(message, from_currency, to_currency, amount)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def show_exchange_preview(message_or_callback, from_currency: str, to_currency: str, amount: float):
    """Show exchange preview"""
    total_amount, fee, rate = exchange_service.calculate_exchange(from_currency, to_currency, amount)
    
    preview_text = f"""
üí± –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–∞:

üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: {amount:.4f} {from_currency}
üì• –ü–æ–ª—É—á–∞–µ—Ç–µ: {total_amount:.4f} {to_currency}
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fee:.4f} {from_currency}
üìä –ö—É—Ä—Å: 1 {from_currency} = {rate:.6f} {to_currency}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:
    """
    
    keyboard = get_confirm_keyboard(from_currency, to_currency, amount)
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(preview_text, reply_markup=keyboard)
    else:
        await message_or_callback.message.edit_text(preview_text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("confirm_"))
async def handle_exchange_confirmation(callback: types.CallbackQuery):
    """Handle exchange confirmation"""
    _, from_currency, to_currency, amount = callback.data.split("_")
    amount = float(amount)
    user_id = callback.from_user.id
    
    # Execute exchange
    success, message, transaction_info = await exchange_service.execute_exchange(
        user_id, from_currency, to_currency, amount
    )
    
    if success:
        result_text = f"""
‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!

üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {transaction_info['amount']:.4f} {transaction_info['from_currency']}
üì• –ü–æ–ª—É—á–µ–Ω–æ: {transaction_info['total_amount']:.4f} {transaction_info['to_currency']}
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {transaction_info['fee']:.4f} {transaction_info['from_currency']}
üìä –ö—É—Ä—Å: {transaction_info['rate']:.6f}
üïê –í—Ä–µ–º—è: {transaction_info.get('timestamp', '–°–µ–π—á–∞—Å')}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üéâ
        """
    else:
        result_text = f"‚ùå –û—à–∏–±–∫–∞: {message}"
    
    await callback.message.edit_text(result_text, reply_markup=get_back_keyboard("back_to_main"))

# Back navigation handlers
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """Back to main menu"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "back_to_currencies")
async def back_to_currencies(callback: types.CallbackQuery):
    """Back to currency selection"""
    await callback.message.edit_text(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
        reply_markup=get_currency_keyboard()
    )

@dp.callback_query(F.data.startswith("back_to_exchange_"))
async def back_to_exchange(callback: types.CallbackQuery):
    """Back to exchange selection"""
    from_currency = callback.data.split("_")[-1]
    await callback.message.edit_text(
        f"üí± –í—ã –≤—ã–±—Ä–∞–ª–∏ {from_currency}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=get_exchange_keyboard(from_currency)
    )

@dp.callback_query(F.data.startswith("back_to_amount_"))
async def back_to_amount(callback: types.CallbackQuery):
    """Back to amount selection"""
    _, from_currency, to_currency = callback.data.split("_")
    rate = exchange_service.get_exchange_rate(from_currency, to_currency)
    rate_text = f"üìä –ö—É—Ä—Å: 1 {from_currency} = {rate:.6f} {to_currency}\n\n"
    
    await callback.message.edit_text(
        f"üí± –û–±–º–µ–Ω {from_currency} ‚Üí {to_currency}\n{rate_text}–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_amount_keyboard(from_currency, to_currency)
    )

# Admin handlers
@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    """Show admin statistics"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # Get basic stats
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
    stats_text += "üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: 5\n"
    stats_text += "üîπ –ö–æ–º–∏—Å—Å–∏—è: 2%\n"
    stats_text += "üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $1\n"
    stats_text += "üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10,000\n\n"
    stats_text += "üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
    
    await callback.message.edit_text(stats_text, reply_markup=get_back_keyboard("back_to_admin"))

@dp.callback_query(F.data == "admin_balances")
async def admin_balances(callback: types.CallbackQuery):
    """Admin balance management"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_back_keyboard("back_to_admin")
    )

@dp.callback_query(F.data == "admin_rates")
async def admin_rates(callback: types.CallbackQuery):
    """Admin rate management"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_back_keyboard("back_to_admin")
    )

@dp.callback_query(F.data == "admin_users")
async def admin_users(callback: types.CallbackQuery):
    """Admin user management"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_back_keyboard("back_to_admin")
    )

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: types.CallbackQuery):
    """Back to admin menu"""
    await callback.message.edit_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_keyboard()
    )

# Cancel handlers
@dp.callback_query(F.data == "cancel_exchange")
async def cancel_exchange(callback: types.CallbackQuery):
    """Cancel exchange operation"""
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_back_keyboard("back_to_main")
    )

# Error handler
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """Handle errors"""
    logger.error(f"Exception while handling {update}: {exception}")
    try:
        if update.message:
            await update.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except:
        pass

async def main():
    """Main function"""
    # Start rate update task
    asyncio.create_task(exchange_service.update_rates_periodically())
    
    # Start bot
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())