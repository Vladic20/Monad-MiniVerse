version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:13
    container_name: crypto_bot_postgres
    environment:
      POSTGRES_DB: crypto_bot
      POSTGRES_USER: crypto_bot
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_bot -d crypto_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования (опционально)
  redis:
    image: redis:6-alpine
    container_name: crypto_bot_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram бот
  bot:
    build: .
    container_name: crypto_wallet_bot
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - DATABASE_URL=postgresql://crypto_bot:${DB_PASSWORD:-your_secure_password}@postgres:5432/crypto_bot
      - INFURA_URL=${INFURA_URL}
      - TRONGRID_API_KEY=${TRONGRID_API_KEY}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL:-https://api.mainnet-beta.solana.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://api.telegram.org/bot${TELEGRAM_TOKEN}/getMe')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
    networks:
      - crypto_bot_network

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    container_name: crypto_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - bot
    restart: unless-stopped
    networks:
      - crypto_bot_network

volumes:
  postgres_data:
    driver: local

networks:
  crypto_bot_network:
    driver: bridge