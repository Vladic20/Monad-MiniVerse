#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Crypto Wallet Telegram Bot
"""

import asyncio
from database import init_db, get_db, create_user, create_wallet, get_user_wallets
from wallet_generator import generate_wallet, generate_multiple_wallets
from balance_checker import balance_checker
from staking_manager import staking_manager
from withdrawal_manager import withdrawal_manager
from utils import validate_address, validate_amount, format_balance_message
from config import SUPPORTED_NETWORKS, STAKING_PERIODS

def example_wallet_generation():
    """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤"""
    print("=== –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ ===")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    print("1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Ethereum –∫–æ—à–µ–ª—å–∫–∞:")
    address, private_key, seed_phrase = generate_wallet('ETH')
    print(f"   –ê–¥—Ä–µ—Å: {address}")
    print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key[:10]}...")
    print(f"   Seed —Ñ—Ä–∞–∑–∞: {seed_phrase[:20]}...")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3 Solana –∫–æ—à–µ–ª—å–∫–æ–≤:")
    wallets = generate_multiple_wallets('SOL', 3)
    for i, wallet in enumerate(wallets, 1):
        print(f"   –ö–æ—à–µ–ª–µ–∫ {i}: {wallet['address']}")
    
    print()

def example_database_operations():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = next(get_db())
    user = create_user(db, 12345)
    print(f"1. –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user.id}, Account={user.account_id}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    address, private_key, seed_phrase = generate_wallet('ETH')
    wallet = create_wallet(
        db=db,
        user_id=user.id,
        network='ETH',
        address=address,
        private_key=private_key,
        seed_phrase=seed_phrase
    )
    print(f"2. –°–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫: {wallet.address}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    wallets = get_user_wallets(db, user.id)
    print(f"3. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
    
    db.close()
    print()

def example_balance_checking():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤"""
    print("=== –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    test_addresses = {
        'ETH': '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
        'TRX': 'TJRabPrwbZy45sbavfcjinPJC18kjpRTv8',
        'SOL': '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'
    }
    
    for network, address in test_addresses.items():
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {network}:")
        balance = balance_checker.get_balance(address, network)
        print(f"   –ê–¥—Ä–µ—Å: {address}")
        for asset, amount in balance.items():
            print(f"   {asset}: {amount}")
        print()

def example_staking_operations():
    """–ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
    print("=== –ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞ ===")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–∏–æ–¥–∞—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–∞
    for period_key, period_info in STAKING_PERIODS.items():
        print(f"–ü–µ—Ä–∏–æ–¥: {period_key}")
        print(f"   –ú–µ—Å—è—Ü–µ–≤: {period_info['months']}")
        print(f"   –°—Ç–∞–≤–∫–∞: {period_info['rate']}%")
        
        # –†–∞—Å—á–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        reward = staking_manager.calculate_reward(100, period_info['rate'], period_info['months'] * 30)
        print(f"   –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ 100 —Ç–æ–∫–µ–Ω–æ–≤: {reward:.4f}")
        print()

def example_validation():
    """–ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤
    test_addresses = [
        ('0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6', 'ETH'),
        ('TJRabPrwbZy45sbavfcjinPJC18kjpRTv8', 'TRX'),
        ('invalid_address', 'ETH'),
        ('0x123', 'ETH')
    ]
    
    print("–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤:")
    for address, network in test_addresses:
        is_valid = validate_address(address, network)
        print(f"   {address} ({network}): {'‚úì' if is_valid else '‚úó'}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º
    test_amounts = ['1.5', '0.001', '100', '0', '-1', 'invalid']
    
    print("\n–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º:")
    for amount in test_amounts:
        result = validate_amount(amount)
        print(f"   '{amount}': {result if result is not None else '–Ω–µ–≤–µ—Ä–Ω–æ'}")
    
    print()

def example_withdrawal_validation():
    """–ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞"""
    print("=== –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_withdrawals = [
        {
            'address': '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
            'amount': 0.1,
            'asset': 'ETH',
            'network': 'ETH',
            'private_key': '0x1234567890abcdef' * 4  # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
        },
        {
            'address': 'TJRabPrwbZy45sbavfcjinPJC18kjpRTv8',
            'amount': 1.0,
            'asset': 'TRX',
            'network': 'TRX',
            'private_key': '0x1234567890abcdef' * 4  # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
        }
    ]
    
    for withdrawal in test_withdrawals:
        print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ {withdrawal['asset']}:")
        is_valid, message = withdrawal_manager.validate_withdrawal(
            withdrawal['address'],
            withdrawal['amount'],
            withdrawal['asset'],
            withdrawal['network'],
            withdrawal['private_key']
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úì' if is_valid else '‚úó'}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print()

def example_network_support():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–µ–π"""
    print("=== –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–µ–π ===")
    
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:")
    for network in SUPPORTED_NETWORKS:
        print(f"   - {network}")
    
    print("\n–°—Ç–∞—Ç—É—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
    print("   ETH/TRX: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–±–∞–ª–∞–Ω—Å, –≤—ã–≤–æ–¥, —Å–≤–∞–ø)")
    print("   SOL/BNB/DOGE/AVAX/POL/XRP: –ë–∞–ª–∞–Ω—Å + –≤—ã–≤–æ–¥ (—Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
    
    print("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:")
    from config import MIN_WITHDRAWAL
    for asset, amount in MIN_WITHDRAWAL.items():
        print(f"   {asset}: {amount}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Crypto Wallet Telegram Bot\n")
    
    try:
        example_wallet_generation()
        example_database_operations()
        example_balance_checking()
        example_staking_operations()
        example_validation()
        example_withdrawal_validation()
        example_network_support()
        
        print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

if __name__ == "__main__":
    main()